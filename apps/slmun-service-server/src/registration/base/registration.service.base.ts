/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Registration as PrismaRegistration,
  Event as PrismaEvent,
  User as PrismaUser,
} from "@prisma/client";

export class RegistrationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RegistrationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.registration.count(args);
  }

  async registrations<T extends Prisma.RegistrationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RegistrationFindManyArgs>
  ): Promise<PrismaRegistration[]> {
    return this.prisma.registration.findMany<Prisma.RegistrationFindManyArgs>(
      args
    );
  }
  async registration<T extends Prisma.RegistrationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RegistrationFindUniqueArgs>
  ): Promise<PrismaRegistration | null> {
    return this.prisma.registration.findUnique(args);
  }
  async createRegistration<T extends Prisma.RegistrationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RegistrationCreateArgs>
  ): Promise<PrismaRegistration> {
    return this.prisma.registration.create<T>(args);
  }
  async updateRegistration<T extends Prisma.RegistrationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RegistrationUpdateArgs>
  ): Promise<PrismaRegistration> {
    return this.prisma.registration.update<T>(args);
  }
  async deleteRegistration<T extends Prisma.RegistrationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RegistrationDeleteArgs>
  ): Promise<PrismaRegistration> {
    return this.prisma.registration.delete(args);
  }

  async getEvent(parentId: string): Promise<PrismaEvent | null> {
    return this.prisma.registration
      .findUnique({
        where: { id: parentId },
      })
      .event();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.registration
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
